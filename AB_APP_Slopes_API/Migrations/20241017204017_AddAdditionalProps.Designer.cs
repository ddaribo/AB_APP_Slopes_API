// <auto-generated />
using System;
using AB_APP_Slopes_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AB_APP_Slopes_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241017204017_AddAdditionalProps")]
    partial class AddAdditionalProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FeedPostID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("FeedPostID");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "Anyone?",
                            FeedPostID = 1,
                            TimeStamp = new DateTime(2024, 9, 25, 11, 44, 11, 0, DateTimeKind.Unspecified),
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        });
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.FeedPost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("SocialFeed");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "Content of post 1",
                            ImgUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            TimeStamp = new DateTime(2024, 10, 17, 23, 40, 17, 0, DateTimeKind.Local).AddTicks(3832),
                            Title = "Post 1",
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = 2,
                            Content = "Content of post 2",
                            ImgUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            TimeStamp = new DateTime(2024, 10, 16, 23, 40, 17, 0, DateTimeKind.Local).AddTicks(3940),
                            Title = "Post 2",
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = 3,
                            Content = "Content of post 3",
                            ImgUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            TimeStamp = new DateTime(2024, 10, 15, 23, 40, 17, 0, DateTimeKind.Local).AddTicks(3963),
                            Title = "Post 3",
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = 4,
                            Content = "Content of post 4",
                            ImgUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            TimeStamp = new DateTime(2024, 10, 14, 23, 40, 17, 0, DateTimeKind.Local).AddTicks(3980),
                            Title = "Post 4",
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = 5,
                            Content = "Content of post 5",
                            ImgUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            TimeStamp = new DateTime(2024, 10, 13, 23, 40, 17, 0, DateTimeKind.Local).AddTicks(3996),
                            Title = "Post 5",
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        });
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Lift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Elevation")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResortId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Lifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Cabin lift",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 2,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Todorka",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 3,
                            Elevation = 0,
                            IsOpen = false,
                            Name = "Most",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 4,
                            Elevation = 0,
                            IsOpen = false,
                            Name = "Kolarski",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 5,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Bunderitza 1",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 6,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Bunderitza 2",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 7,
                            Elevation = 0,
                            IsOpen = false,
                            Name = "Gondola",
                            ResortId = 3
                        },
                        new
                        {
                            Id = 8,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Sitnyakovo express",
                            ResortId = 3
                        },
                        new
                        {
                            Id = 9,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Martinovi baraki",
                            ResortId = 3
                        },
                        new
                        {
                            Id = 10,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Yastrebetz Express",
                            ResortId = 3
                        },
                        new
                        {
                            Id = 11,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Markudzhik",
                            ResortId = 3
                        },
                        new
                        {
                            Id = 12,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Cabin lift",
                            ResortId = 4
                        },
                        new
                        {
                            Id = 13,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Lale 1",
                            ResortId = 4
                        },
                        new
                        {
                            Id = 14,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Lale 2",
                            ResortId = 4
                        },
                        new
                        {
                            Id = 15,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Pomagalski",
                            ResortId = 4
                        },
                        new
                        {
                            Id = 16,
                            Elevation = 0,
                            IsOpen = true,
                            Name = "Mecha polyana",
                            ResortId = 4
                        });
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Resort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvalancheRisk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PassImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Resorts");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AvalancheRisk = "Low avalanche risk",
                            ImageUrl = "https://my.appbuilder.dev/api/assets/750ef162-23d7-4919-9988-fd46ed1ddb8f/content?ts=2024-09-17T14:18:50.361872Z",
                            Name = "Bansko",
                            PassImageUrl = "https://my.appbuilder.dev/api/assets/d2f3a913-5acc-447d-a67d-a8fcc374421a/content?ts=2024-09-19T10:16:32.939986Z"
                        },
                        new
                        {
                            Id = 3,
                            AvalancheRisk = "Low avalanche risk",
                            ImageUrl = "https://my.appbuilder.dev/api/assets/e0c392f7-74b8-4cbd-805b-741552fe6683/content?ts=2024-09-17T14:17:57.579837Z",
                            Name = "Borovets",
                            PassImageUrl = "https://my.appbuilder.dev/api/assets/c78c2e7e-15d0-4222-8310-7656ab1fc9dc/content?ts=2024-09-19T10:18:36.851622Z"
                        },
                        new
                        {
                            Id = 4,
                            AvalancheRisk = "Low avalanche risk",
                            ImageUrl = "https://my.appbuilder.dev/api/assets/8651aee7-d411-47dd-90d7-615290048064/content?ts=2024-10-10T10:33:00.6130576Z",
                            Name = "Vitosha",
                            PassImageUrl = "https://my.appbuilder.dev/api/assets/8d47d314-622d-405f-8d3b-59d5b6d71bbd/content?ts=2024-10-10T10:33:01.1651277Z"
                        });
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.SkiPass", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReloadable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResortId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("SkiPasses");

                    b.HasData(
                        new
                        {
                            ID = "123456",
                            FirstName = "",
                            IsActive = false,
                            IsReloadable = false,
                            LastName = "",
                            ResortId = 2,
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = "pass-001",
                            FirstName = "John",
                            IsActive = true,
                            IsReloadable = true,
                            LastName = "Doe",
                            ResortId = 2,
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        },
                        new
                        {
                            ID = "pass-002",
                            FirstName = "Jane",
                            IsActive = true,
                            IsReloadable = false,
                            LastName = "Smith",
                            ResortId = 3,
                            UserId = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3"
                        });
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.SkiPassValidationItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Elevation")
                        .HasColumnType("int");

                    b.Property<int>("LiftID")
                        .HasColumnType("int");

                    b.Property<string>("SkiPassId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("LiftID");

                    b.HasIndex("SkiPassId");

                    b.ToTable("SkiPassValidationItems");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Elevation = 1500,
                            LiftID = 1,
                            SkiPassId = "123456",
                            Time = "09:00"
                        },
                        new
                        {
                            ID = 2,
                            Elevation = 2300,
                            LiftID = 1,
                            SkiPassId = "123456",
                            Time = "09:35"
                        },
                        new
                        {
                            ID = 3,
                            Elevation = 1700,
                            LiftID = 3,
                            SkiPassId = "123456",
                            Time = "09:40"
                        },
                        new
                        {
                            ID = 4,
                            Elevation = 1900,
                            LiftID = 3,
                            SkiPassId = "123456",
                            Time = "09:45"
                        },
                        new
                        {
                            ID = 5,
                            Elevation = 1200,
                            LiftID = 4,
                            SkiPassId = "123456",
                            Time = "09:55"
                        },
                        new
                        {
                            ID = 6,
                            Elevation = 1750,
                            LiftID = 4,
                            SkiPassId = "123456",
                            Time = "10:05"
                        },
                        new
                        {
                            ID = 7,
                            Elevation = 1300,
                            LiftID = 5,
                            SkiPassId = "123456",
                            Time = "10:06"
                        },
                        new
                        {
                            ID = 8,
                            Elevation = 1800,
                            LiftID = 5,
                            SkiPassId = "123456",
                            Time = "10:14"
                        },
                        new
                        {
                            ID = 9,
                            Elevation = 1800,
                            LiftID = 6,
                            SkiPassId = "123456",
                            Time = "10:20"
                        },
                        new
                        {
                            ID = 10,
                            Elevation = 2500,
                            LiftID = 6,
                            SkiPassId = "123456",
                            Time = "10:35"
                        },
                        new
                        {
                            ID = 11,
                            Elevation = 1500,
                            LiftID = 1,
                            SkiPassId = "123456",
                            Time = "11:00"
                        },
                        new
                        {
                            ID = 12,
                            Elevation = 1900,
                            LiftID = 1,
                            SkiPassId = "123456",
                            Time = "11:35"
                        },
                        new
                        {
                            ID = 13,
                            Elevation = 1200,
                            LiftID = 4,
                            SkiPassId = "123456",
                            Time = "11:40"
                        },
                        new
                        {
                            ID = 14,
                            Elevation = 1750,
                            LiftID = 4,
                            SkiPassId = "123456",
                            Time = "11:49"
                        },
                        new
                        {
                            ID = 49,
                            Elevation = 1500,
                            LiftID = 0,
                            SkiPassId = "pass-001",
                            Time = "08:30"
                        },
                        new
                        {
                            ID = 50,
                            Elevation = 1600,
                            LiftID = 0,
                            SkiPassId = "pass-001",
                            Time = "09:15"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4b5e8c5-3253-4a5d-b0c5-b2845e0672e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e572262-3307-4ce7-85c7-ab3aa6e9746e",
                            Email = "user@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgMpSD8PRl5bjhwpfAmC03rdAemVqABZVtyp4rm7HM1etb2110YmPLtfLQxMAzfxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MUCKVMYLN3EZL7HJPIJBRX6GWW3TWZKS",
                            TwoFactorEnabled = false,
                            UserName = "user@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Comment", b =>
                {
                    b.HasOne("AB_APP_Slopes_API.Models.FeedPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("FeedPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.FeedPost", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Lift", b =>
                {
                    b.HasOne("AB_APP_Slopes_API.Models.Resort", null)
                        .WithMany("Lifts")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.SkiPass", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.SkiPassValidationItem", b =>
                {
                    b.HasOne("AB_APP_Slopes_API.Models.Lift", "Lift")
                        .WithMany()
                        .HasForeignKey("LiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AB_APP_Slopes_API.Models.SkiPass", "SkiPass")
                        .WithMany()
                        .HasForeignKey("SkiPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lift");

                    b.Navigation("SkiPass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.FeedPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AB_APP_Slopes_API.Models.Resort", b =>
                {
                    b.Navigation("Lifts");
                });
#pragma warning restore 612, 618
        }
    }
}
